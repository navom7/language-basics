What is Annotation?
- It is kind of adding META DATA to the java code.
- Means, its usage is OPTIONAL.
- We can use this meta data information at runtime and can add certain logic in our code if wanted.
- How to Read Meta data information? Using Reflection as discussed in previous video.
- Annotations can be applied at anywhere like Classes, Methods, Interface, fields, parameters etc.

@Override is an annotation

TYPES OF ANNOTATION
    1.Pre-defined annotation
        * Used on Annotations(called meta-annotation)
            -> @Target
            -> @Retention
            -> @Inherited
            -> @Repeatable(java8 feature)

        * Used on Java code(Like classes, methods, etc.)
            -> @Deprecated
            -> @Override
            -> @SuppressWarnings
            -> @FunctionalInterface
            -> @SafeVarargs


    2. Custom annotation/User-defined annotation






Annotations used on Java Code:

    @Deprecated:
    - Usage of Deprecated Class or Method or fields, shows you compile time WARNING.
    - Deprecation means, no further improvement is happening on this and use new alternative method or field instead.
    - Can be used over: Constructor, Field, Local Variable, Method, Package, Parameter, Type(class, interface, enum)

    @Override
    - checks if correctly overridden or not
    - used over methods


    @SupressWarnings:
    - It will tell compiler to IGNORE any compile time WARNING.
    - Use it safely, could led to Run time exception if, any valid warning is IGNORED
    - Can be used over: Field, Method, Parameter, Constructor, Local Variable, Type (Class or interface or enum)
    -> this way we can annotate
        @SupressWarnings("deprecation")
        @SupressWarnings("unused")
        @SupressWarnings("all")




    @Functionalinterface:
    - Restrict Interface to have only 1 abstract method.
    - Throws Compilation error, if more than 1 abstract method found.
    - Can be used over: Type (Class or interface or enum)





    @SafeVarargs:
    - Used to suppress "Heap pollution warning"
    - Used over methods and Constructors which has Variable Arguments as parameter.
    - Method should be either static or final (i.e. methods which can not be overridden)
    - In Javag, we can also use it on private methods too.

    What is Heap Pollution?
    Object of One Type (Example String), storing the reference of another type Object (Example Integer)






ANNOTATIONS USED ON OTHER ANNOTATION
    1. @Target
        ->It provided the detail of where all that specific annotation can be used
        i.e. @Target({ElementType.CONSTRUCTOR, ElementType.METHOD}) //This annotation can be used only over constructor and methods

        @Target({ElementType.METHOD}) //This annotation can be used only over method
        public @interface Override{

        }

        Possible Element Types:
            TYPE
            FIELD,
            METHOD,
            PARAMETER,
            CONSTRUCTOR,
            LOCAL_VARIABLE,
            ANNOTATION_TYPE,
            PACKAGE,
            TYPE PARAMETER ( allow you to apply on generic types <T> )
            TYPE_USE (Java 8 feature, allow you to use annotation at all places where Type you can declare (like List< @annotation


    2. @Retention
        - This meta-annotation tells, how Annotation will be stored in java.
            -> RetentionPolicy.SOURCE: Annotations will be discarded by the compiler itself and it will not be recorded in .class file
            -> RetentionPolicy.CLASS: Annotations will be recorded in class file but will be ignore by JVM at run time.
            -> RetentionPolicy.RUNTIME: Annotations will be recorded in class file + available during run time.
            -> Usage of reflection can be done.

    3. @Documented:
       - By default, Annotations are ignored when Java Documentation is generated.
       - With this meta-annotation even Annotations will come in Java Docs.

    4. @Inherited:
       - By default, Annotations applied on parent class are not available to child classes.
       - But it is after this meta-annotation.
       - This Meta-annotation has no effect, if annotation is used other than a class.

    5. @Repeatable:
       - Allow us to use the same annotation more than 1 at same place.
            We can not do this before JAVA8:

