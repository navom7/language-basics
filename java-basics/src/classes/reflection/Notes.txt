What is Reflection?

This is used to examine the Classes, Methods, Fields, Interfaces at runtime and also possible to change the behavior of the Class too.
For example:
• What all methods present in the class.
• What all fields present in the class.
• What is the return type of the method.
• What is the Modifier of the Class
• What all interfaces class has implemented
• Change the value of the public and private fields of the Class etc.......



How to do Reflection of Classes?
To reflect the class, we first need to get an Object of Class
(So, lets first understand, Class then we will come back to how to reflect the class.)
What is this class Class?
- Instance of the class Class represents classes during runtime.
- JVM creates one Class object for each and every class which is loaded during run time.
- This Class object, has meta data information about the particular class like its method, fields, constructor etc.
How to get the particular class Class object?
There are 3 ways:

1. Using forName() method
    //assume that we have one class called Bird
        class Bird { }
    //get the object of Class for getting the metadata information of Bird class.
        Class birdClass = Class.forName ( className: "Bird");

2. Using •class
    //assume that we have one class called Bird
        class Bird { }
    //get the object of Class for getting the metadata information of Bird class.
        Class birdClass = Bird.class;

3. using getClass() method
    //assume that we have one class called Bird
        class Bird { }
        Bird birdObj = new Bird;
    //get the object of Class for getting the metadata information of Bird class.
        Class birdClass = birdObj.getClass();


The package "java.lang.reflect" provides classes that can be used to access and manipulate
the value like fields, methods, constructor etc.
And these classes are generally returned by listed get Methods of Class only.



Drawbacks of Reflection
    ->  this breaks the rule of singleton
       even if the constructor is private then also we will be able to create the instance of that class
    -> we can access private fields and methods and also we can call the private methods
    -> because reflection happens in runtime it is slow and ultimately slows down the code

Hence there is no point of using reflection because it breaks the rule of OOPS principle itself